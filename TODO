1) Server (aka Service)
	-> Media Player FSM.
		-> Time tracking 
	-> Context getting stuff: 
		-> GPS coordinates. (background task)
		-> Weather (definitely background task + API call)
		-> Accelerometer? (maybe?)
		-> Current time / day of the week.
	-> Track music collection on filesystem. (polling at predefined intervals?)
		-> Give those tracks our own IDs + store in own DB.
	-> Separate service for ranking?
		-> sum (dot( current_gps_loc, trackpreviouslyplated_at_gps_loc)) for locations. (?)
	-> Ranks recomputed every hour?
		->  "Scrolling" playlist (? maybe not!)
	
2) Activity 
	-> Somehow trigger mood "dialog"/activity.
		-> Activate it using button or at predefined intervals (?) 

3) Common
	-> Proper Playlist datastructure
		-> Must point to currently playing track.
		-> Ability to choose previous / next tracks. (Linked list?)

4) DB Schemas
	-> When song finishes playing 
		-> (song_id, gps, user_mood, time, day_of_the_week, weather(temperature?), activity)
		
Context Table 
Song-Id, Listening-duration, Longtitude/Latitute Mood(Happy,Neutral,SAD!) , Day, SongStartingListenTime, (Running / Walking / Driving / Working == activities == acceleration based?)


date -> Day (Monday, Tuesday..., etc == binary vector?)
date -> hh:mm:ss ( smoothing factor? )
Weather -> temperature, precipation(raining/snowing/sunny == binary vector?) (external API??)


Ranking 
=======
currentContext = ...
sql(select * FROM Song)
for each song {
	sql (select song From Context) (id - location - mood)  {
		rank  = similarity(sql.context.location, currentContext.location)
		rank += similarity(sql.context.mood, currentContext.mood)
		rank = rank * (listening_duration / song_total_duration)
	}
}

(time1 - time2) (time3 - time4) -- two different entries for now , separate based on threshold?

Alex: Lon/Lat ranking
Gabri: Mood(splash) activity. Better UI, Change Mood

